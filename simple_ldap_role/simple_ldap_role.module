<?php
/**
 * @file
 * Main simple_ldap_role module file.
 */

/**
 * Implements hook_menu().
 */
function simple_ldap_role_menu() {
  $items = array();

  $items['admin/config/people/simple_ldap/role'] = array(
    'title' => 'Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_ldap_role_admin'),
    'access arguments' => array('adminster site configuration'),
    'file' => 'simple_ldap_role.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  return $items;
}

/**
 * Implements hook_user_load().
 *
 * Override the roles based on what is in the LDAP directory.
 *
 * @todo  check for DRUPAL_AUTHENTICATED_RID and DRUPAL_ANONYMOUS_RID.
 */
function simple_ldap_role_user_load($users) {
  return;
  $server = SimpleLdapServer::singleton();
  $basedn = variable_get('simple_ldap_role_basedn');
  $scope = variable_get('simple_ldap_role_scope');
  $objectclass = variable_get('simple_ldap_role_objectclass');
  $extrafilter = variable_get('simple_ldap_role_filter');
  $attribute_name = variable_get('simple_ldap_role_attribute_name');
  $attribute_member = variable_get('simple_ldap_role_attribute_member');
  $format = variable_get('simple_ldap_role_attribute_member_format');

  $role_filter = '(objectclass=' . $objectclass . ')';
  if (!empty($extrafilter)) {
    $role_filter = '(&' . $role_filter . '(' . $extrafilter . '))';
  }

  // Get a list of groups for each of the users.
  foreach ($users as $key => $user) {

    // Determine the search string to use (DN or Name).
    switch ($format) {
      case 'dn':
        $ldap_user = SimpleLdapUser::singleton($user->name);
        $search = $ldap_user->dn;
        break;

      case 'name':
      default:
        $search = $user->name;
    }

    // Generate the final filter, and do the search.
    $filter = '(&' . $role_filter . '(' . $attribute_member . '=' . $search . '))';
    $groups = $server->search($basedn, $filter, $scope);

    // Make sure all of the groups from the search result are in the user role list.
    for ($i = 0; $i < $groups['count']; $i++) {
      if (!in_array($groups[$i][$attribute_name][0], $users[$key]->roles)) {
        $users[$key]->roles[] = $groups[$i][$attribute_name][0];
      }
    }
  }
}

/**
 * Implements hook_user_role_presave().
 *
 * Fires before a role is added or edited.
 *
 * @todo simple_ldap_role_user_role_presave()
 */
function simple_ldap_role_user_role_presave($role) {
}

/**
 * Implements hook_user_role_insert().
 *
 * Fires when a role is inserted.
 *
 * @todo simple_ldap_role_user_role_insert()
 */
function simple_ldap_role_user_role_insert($role) {
}

/**
 * Implements hook_user_role_update().
 *
 * Fires when a role is updated.
 *
 * @todo simple_ldap_role_user_role_update()
 */
function simple_ldap_role_user_role_update($role) {
}

/**
 * Implements hook_user_role_delete().
 *
 * Fires when a role is deleted.
 *
 * @todo simple_ldap_role_user_role_delete()
 */
function simple_ldap_role_user_role_delete($role) {
}

/**
 * Returns the configured authoritative data source.
 *
 * This value depends on both the configurations of simple_ldap and
 * simple_ldap_role.
 */
function simple_ldap_role_source() {
  $server = SimpleLdapServer::singleton();

  // If the LDAP server is set to read-only, force ldap as the source.
  if ($server->readonly) {
    return 'ldap';
  }

  // Get the source config from simple_ldap_role.
  return variable_get('simple_ldap_role_source', 'ldap');
}

/**
 * Returns the Simple LDAP Role attribute map, if configured.
 */
function simple_ldap_role_attribute_map() {
  $attribute_map = variable_get('simple_ldap_role_attribute_map', array());
  foreach ($attribute_map as $key => $attribute) {
    // LDAP likese lowercase.
    $attribute_map[$key]['ldap'] = strtolower($attribute_map[$key]['ldap']);

    // Make sure a type is set.
    if (!isset($attribute['type'])) {
      $attribute_map[$key]['type'] = 'default';
    }

    // Make sure "required" is set.
    if (!isset($attribute['required'])) {
      $attribute_map[$key]['required'] = FALSE;
    }
  }
  return $attribute_map;
}

function simple_ldap_role_entity_info_alter(&$entity_info) {
  if (isset($entity_info['user'])) {
    // Use the SimpleLdapRoleController class to manage users.
    $entity_info['user']['controller class'] = 'SimpleLdapRoleController';
  }
}

function simple_ldap_role_module_implements_alter(&$implementations, $hook) {
  // Increase the weight of hook_entity_info_alter().
  if ($hook == 'entity_info_alter') {
    $group = $implementations['simple_ldap_role'];
    unset($implementations['simple_ldap_role']);
    $implementations['simple_ldap_role'] = $group;
  }
}
