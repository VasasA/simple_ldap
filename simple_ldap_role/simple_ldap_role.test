<?php
/**
 * @file
 * Tests for Simple LDAP Role module.
 */

abstract class SimpleLdapRoleTestCase extends DrupalWebTestCase {

  /**
   * Inherited parent::setUp().
   */
  public function setUp() {
    parent::setUp(array('simple_ldap', 'simple_ldap_role', 'simple_ldap_test', 'simple_ldap_user'));
  }

  /**
   * Log in with User 1.
   */
  public function drupalUser1Login() {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }

    // Load password hashing API.
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

    // Generate a random password.
    $pass = hash('sha256', microtime());

    // Update user-1's password in the database.
    db_query("UPDATE {users} SET pass = :hash WHERE uid = 1", array(':hash' => user_hash_password($pass)));

    // Load user-1.
    $admin_user = user_load(1);

    // Set the password.
    $admin_user->pass_raw = $pass;

    // Log in.
    $this->drupalLogin($admin_user);
  }

}

class SimpleLdapRoleCreateDrupalRoleTestCase extends SimpleLdapRoleTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Create Drupal Role',
      'description' => 'Tests that LDAP groups are created appropriately when a Drupal role is created.',
      'group' => 'Simple LDAP Role',
    );
  }

  public function testCreateRoleWithDefaultUser() {
    // Get module configurations.
    $role_objectclass = variable_get('simple_ldap_role_objectclass');
    $role_attribute_member = variable_get('simple_ldap_role_attribute_member');
    $role_attribute_member_format = variable_get('simple_ldap_role_attribute_member_format');
    $role_attribute_member_default = variable_get('simple_ldap_role_attribute_member_default');

    // Get an LDAP server object.
    $server = SimpleLdapServer::singleton();

    // Generate a randome group name.
    $name = $this->randomName();
    $dn = simple_ldap_role_dn($name);

    // Log in as User 1.
    $this->drupalUser1Login();

    // Submit the form to add a new Drupal role.
    $edit = array(
      'name' => $name,
    );
    $this->drupalPost('admin/people/permissions/roles', $edit, t('Add role'));
    $this->assertText(t('The role has been added'), t('The @role role was added to Drupal', array('@role' => $name)));

    // Attempt to load the LDAP group.
    $result = $server->search($dn, 'objectclass=*', 'base', array($role_attribute_member));

    // The LDAP group should have only been created if either there is a default
    // member configured, or the member attribute is not required (allowing an
    // empty group).
    $must = $server->schema->must($role_objectclass, TRUE);
    if (!in_array($role_attribute_member, $must)) {
      // Test that the LDAP entry was created.
      $this->assertEqual($result[0]['dn'], $dn, t('@dn is present in the LDAP directory.', array('@dn' => $dn)));
      if (!empty($role_attribute_member_default)) {
        // Test that the default user was added to the LDAP group.
        $this->assertTrue(in_array($role_attribute_member_default, $result[0][$role_attribute_member]), t('@default is a member of @dn', array('@default' => $role_attribute_member_default, '@dn' => $dn)));
      }
    }
    else {
      // The member attribute is required, whether the group was created depends
      // on if there is a default group configured.
      if (!empty($role_attribute_member_default)) {
        // Test that the group was created, and the default user was added.
        $this->assertEqual($result[0]['dn'], $dn, t('@dn is present in the LDAP directory.', array('@dn' => $dn)));
      }
      else {
        // Test that the group was not created.
        $this->assertTrue($result['count'] == 0, t('The group is not present in the LDAP directory.'));
      }
    }

  }

//  public function testCreateRoleWithoutDefaultUser() {
//  }

}
