<?php
/**
 * @file
 * Tests for Simple LDAP module.
 */

abstract class SimpleLdapWebTestCase extends DrupalWebTestCase {

  public function setUp() {
    parent::setUp(array('simple_ldap', 'simple_ldap_test'));
    simple_ldap_test_config();
  }

}

class SimpleLdapServerTestCase extends SimpleLdapWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'LDAP server connectivity',
      'description' => 'Tests the Simple LDAP server configuration and connectivity.',
      'group' => 'Simple LDAP',
    );
  }

  public function testConfiguration() {
    // Test that simple_ldap is configured.
    $this->assertTrue(simple_ldap_configured(), t('The Simple LDAP module is configured.'));

    // Initialize the LDAP server.
    $this->server = SimpleLdapServer::singleton();

    // Test connectivity to the configured LDAP server.
    $this->assertTrue($this->server->bind(), t('Successfully bound to the test LDAP server.'));
    $this->assertTrue($this->server->unbind(), t('Successfully unbound from the test LDAP server.'));
  }

}

class SimpleLdapServerPlainTestCase extends SimpleLdapWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'LDAP server plain connection',
      'description' => 'Tests a Simple LDAP Server connection to port 389 with no encryption.',
      'group' => 'Simple LDAP',
    );
  }

  public function testUnencrypted() {
    // Test that simple_ldap is configured.
    $this->assertTrue(simple_ldap_configured(), t('The Simple LDAP module is configured.'));

    // Initialize the LDAP server.
    $this->server = SimpleLdapServer::singleton();

    // Alter the server configuration.
    $host = parse_url($this->server->host);
    $this->server->host = isset($host['host']) ? $host['host'] : $host['path'];
    $this->server->port = 389;
    $this->server->starttls = FALSE;

    // Verify connectivity.
    $this->assertTrue($this->server->bind(), t('Successfully bound to the test LDAP server.'));
    $this->assertTrue($this->server->unbind(), t('Successfully unbound from the test LDAP server.'));
  }

}

class SimpleLdapServerStartTLSTestCase extends SimpleLdapWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'LDAP server startTLS connection',
      'description' => 'Tests a Simple LDAP Server connection to port 389 using StartTLS.',
      'group' => 'Simple LDAP',
    );
  }

  public function testStartTLS() {
    // Test that simple_ldap is configured.
    $this->assertTrue(simple_ldap_configured(), t('The Simple LDAP module is configured.'));

    // Initialize the LDAP server.
    $this->server = SimpleLdapServer::singleton();

    // Alter the server configuration.
    $host = parse_url($this->server->host);
    $this->server->host = isset($host['host']) ? $host['host'] : $host['path'];
    $this->server->port = 389;
    $this->server->starttls = TRUE;

    // Verify connectivity.
    $this->assertTrue($this->server->bind(), t('Successfully bound to the test LDAP server.'));
    $this->assertTrue($this->server->unbind(), t('Successfully unbound from the test LDAP server.'));
  }

}

class SimpleLdapServerSSLTestCase extends SimpleLdapWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'LDAP server SSL connection',
      'description' => 'Tests a Simple LDAP Server connection to port 636 using SSL.',
      'group' => 'Simple LDAP',
    );
  }

  public function testSSL() {
    // Test that simple_ldap is configured.
    $this->assertTrue(simple_ldap_configured(), t('The Simple LDAP module is configured.'));

    // Initialize the LDAP server.
    $this->server = SimpleLdapServer::singleton();

    // Alter the server configuration.
    $host = parse_url($this->server->host);
    $hostname = isset($host['host']) ? $host['host'] : $host['path'];
    $this->server->host = 'ldaps://' . $hostname;
    $this->server->port = 636;
    $this->server->starttls = FALSE;

    // Verify connectivity.
    $this->assertTrue($this->server->bind(), t('Successfully bound to the test LDAP server.'));
    $this->assertTrue($this->server->unbind(), t('Successfully unbound from the test LDAP server.'));
  }

}
