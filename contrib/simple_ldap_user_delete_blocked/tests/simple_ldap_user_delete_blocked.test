<?php
/**
 * @file
 * Tests for Simple LDAP User Delete Blocked module.
 */

class SimpleLdapUserDeleteBlockedWebTestCase extends SimpleLdapUserTestCase {

  public function testUserDeleteBlocked() {
    
    // Enable the simple_ldap_user_delete_blocked modules.
    $modules = array('simple_ldap_user_delete_blocked');
    $success = module_enable($modules);
    $this->assertTrue($success, t('Enabled module: @modules', array('@modules' => implode(', ', $modules))));

    // Create new user.
    $user = $this->drupalCreateUser();
    $user_name = $user->name;
    $user_uid = $user->uid;

    // Log in as User 1.
    $this->drupalUser1Login();
    
    // Verify that the test user exists in LDAP.
    $ldap_user = new SimpleLdapUser($user_name);
    $this->assertTrue($ldap_user->exists, t(':name exists in LDAP.', array(':name' => $user_name)));

    // Block the user.
    $edit = array(
      'status' => 0,
    );
    $this->drupalPost('user/' . $user_uid . '/edit', $edit, t('Save'));
    $this->assertText(t('The changes have been saved.'), t('The @user is blocked in Backdrop.', array('@user' => $user_name)));

    // Verify that the test user does not exist in LDAP.
    $ldap_user = new SimpleLdapUser($user_name);
    $this->assertFalse($ldap_user->exists, t(':name does not exist in LDAP.', array(':name' => $user_name)));

    // Activate the user.
    $edit = array(
      'status' => 1,
    );
    $this->drupalPost('user/' . $user_uid . '/edit', $edit, t('Save'));
    $this->assertText(t('The changes have been saved.'), t('The @user is activated in Backdrop.', array('@user' => $user_name)));

    // Verify that the test user exists in LDAP.
    $ldap_user = new SimpleLdapUser($user_name);
    $this->assertTrue($ldap_user->exists, t(':name exists in LDAP.', array(':name' => $user_name)));

    // Cleanup.
    $ldap_user = new SimpleLdapUser($user_name);
    $ldap_user->delete();
    $this->assertFalse($ldap_user->exists, t(':dn was removed from LDAP', array(':dn' => $ldap_user->dn)));

  }
}
