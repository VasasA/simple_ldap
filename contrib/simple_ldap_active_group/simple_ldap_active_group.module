<?php
/**
 * @file
 * Main simple_ldap_active_group module file.
 */

/**
 * Implements hook_menu().
 */
function simple_ldap_active_group_menu() {
  $items = array();

  $items['admin/config/people/simple_ldap/active_group'] = array(
    'title' => 'Active Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_ldap_active_group_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'simple_ldap_active_group.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_user_insert().
 */
function simple_ldap_active_group_user_insert(&$edit, $account, $category) {
  if ($account->uid != 1) {
    if ($account->status) {
      simple_ldap_active_group_active($account);
    }
    else {
      simple_ldap_active_group_blocked($account);
    }
  }
}

/**
 * Implements hook_user_update().
 */
function simple_ldap_active_group_user_update(&$edit, $account, $category) {
  if ($account->uid != 1) {
    if ($account->status) {
      simple_ldap_active_group_active($account);
    }
    else {
      simple_ldap_active_group_blocked($account);
    }
  }
}

/**
 * Removes a user from the configured default LDAP group.
 */
function simple_ldap_active_group_blocked($account) {
  $user_basedn = variable_get('simple_ldap_user_basedn');
  $user_scope = variable_get('simple_ldap_user_scope');
  $user_filter = simple_ldap_active_group_filter();
  $group_dn = variable_get('simple_ldap_active_group_group');

  // Search for the LDAP user and group.
  $server = SimpleLdapServer::singleton();
  $ldap_user = $server->search($user_basedn, $user_filter, $user_scope);
  $ldap_group = $server->search($dn, 'objectclass=*', 'base');

  // Verify that a user and group were both found in LDAP.
  if ($ldap_group['count'] > 0 && $ldap_user['count'] > 0) {
    $user_dn = $ldap_user[0]['dn'];

    // Check if the user is in the group.
    if (in_array($user_dn, $ldap_group[0]['member'])) {

      // Check if the user is the last member of the group.
      if ($ldap_group[0]['member']['count'] == 1) {
        $server->modify($group_dn, array('member' => variable_get('simple_ldap_role_attribute_member_default')), 'add');
      }

      // Delete the user from the group.
      $server->modify($dn, array('member' => $ldap_dn), 'del');
    }
  }
}

/**
 * Adds a user to the configured default LDAP group.
 */
function simple_ldap_active_group_active($account) {
  $user_basedn = variable_get('simple_ldap_user_basedn');
  $user_scope = variable_get('simple_ldap_user_scope');
  $user_filter = simple_ldap_active_group_filter();
  $group_dn = variable_get('simple_ldap_active_group_group');

  // Search for the LDAP user and group.
  $server = SimpleLdapServer::singleton();
  $ldap_user = $server->search($user_basedn, $user_filter, $user_scope);
  $ldap_group = $server->search($group_dn, 'objectclass=*', 'base');

  // Verify that a user and group were both found in LDAP.
  if ($ldap_group['count'] > 0 && $ldap_user['count'] > 0) {
    $user_dn = $ldap_user[0]['dn'];

    // Check if the user is in the group.
    if (!in_array($user_dn, $ldap_group[0]['member'])) {

      // Add the user to the group.
      $attributes = array('member' => $user_dn);
      $server->modify($group_dn, $attributes, 'add');
    }
  }
}

/**
 * Creates a search filter based on the simple_ldap_user configuration.
 */
function simple_ldap_active_group_filter() {
  $objectclass = variable_get('simple_ldap_user_objectclass', array('*'));
  $filter = '(&(objectclass=' . implode(')(objectclass=', $objectclass) . '))';
  return $filter;
}
