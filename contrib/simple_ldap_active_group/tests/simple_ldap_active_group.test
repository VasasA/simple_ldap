<?php
/**
 * @file
 * Tests for Simple LDAP Active Group module.
 */

class SimpleLdapActiveGroupDefaultGroupWebTestCase extends SimpleLdapUserTestCase {

  /**
   * Test default LDAP group
   */
  public function testDefaultLdapGroup() {
    
    // Enable the simple_ldap_role and the simple_ldap_active_group modules.
    $modules = array('simple_ldap_role', 'simple_ldap_active_group');
    $success = module_enable($modules);
    $this->assertTrue($success, t('Enabled modules: @modules', array('@modules' => implode(', ', $modules))));
    
    // Get default LDAP group.
    $default_group_dn = config_get('simple_ldap_role.settings', 'simple_ldap_active_group_group');
    $default_group = explode('=', explode(',', $default_group_dn)[0])[1];
    $this->assertTrue(TRUE, 'Enabled modules::'.$default_group_dn.'::'.$default_group);
    
    // Get module configurations.
    $objectclass = simple_ldap_role_variable_get('simple_ldap_role_objectclass');
    $attribute_member = simple_ldap_role_variable_get('simple_ldap_role_attribute_member');
    $attribute_name = simple_ldap_user_variable_get('simple_ldap_user_attribute_name');
    $basedn = simple_ldap_user_variable_get('simple_ldap_user_basedn');

    // Log in as User 1.
    $this->drupalUser1Login();

    // Submit the form to add a new Drupal role.
    $edit = array(
      'label' => $default_group,
      'name' => $default_group,
    );
    $this->drupalPost('admin/config/people/roles', $edit, t('Add role'));
    $this->assertText(t('The @role role has been added', array('@role' => $default_group)), t('The @role role was added to Drupal', array('@role' => $default_group)));

    // Create new user.
    $user = $this->drupalCreateUser();
    $user_dn = $attribute_name . '=' . $user->name . ',' . $basedn;

    // Synchronization is forced by user edit page.
    $edit = array();
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));

    // Load the LDAP group.
    $ldap_group = new SimpleLdapRole($default_group);

    // Test that the LDAP entry was created.
    $this->assertTrue($ldap_group->exists, t('@dn is present in the LDAP directory', array('@dn' => $ldap_group->dn)));

    // Test that the new user was added to the default LDAP group.
    $members = $ldap_group->$attribute_member;
    $this->assertTrue(in_array($user_dn, $members, TRUE), t('The user, @user, was added as a member of @dn', array('@user' => $user_dn, '@dn' => $ldap_group->dn)));

    // Block the user.
    $edit = array(
      'status' => 0,
    );
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));

    // Reload the LDAP group.
    $ldap_group = new SimpleLdapRole($default_group);
    $members = $ldap_group->$attribute_member;

    // Test that the user was removed from the default LDAP group.
    $this->assertFalse(in_array($user_dn, $members, TRUE), t('The user, @user, was removed from @dn', array('@user' => $user_dn, '@dn' => $ldap_group->dn)));

    // Activate the user.
    $edit = array(
      'status' => 1,
    );
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));

    // Reload the LDAP group.
    $ldap_group = new SimpleLdapRole($default_group);
    $members = $ldap_group->$attribute_member;

    // Test that the user was added to the default LDAP group.
    $this->assertTrue(in_array($user_dn, $members, TRUE), t('The user, @user, was added as a member of @dn', array('@user' => $user_dn, '@dn' => $ldap_group->dn)));

    // Cleanup.
    $ldap_user = new SimpleLdapUser($user->name);
    $ldap_user->delete();
    $this->assertFalse($ldap_user->exists, t(':dn was removed from LDAP', array(':dn' => $ldap_user->dn)));
    $ldap_group->delete();
  }
}

class SimpleLdapActiveGroupDeleteIgnoreFilterWebTestCase extends SimpleLdapUserTestCase {

  /**
   * Test: delete the user by ignoring the filter
   */
  public function testDeleteIgnoreFilter() {

    // Enable the simple_ldap_role and the simple_ldap_active_group modules.
    $modules = array('simple_ldap_role', 'simple_ldap_active_group');
    $success = module_enable($modules);
    $this->assertTrue($success, t('Enabled modules: @modules', array('@modules' => implode(', ', $modules))));

    // Get module configurations.
    $attribute_member_default = simple_ldap_role_variable_get('simple_ldap_role_attribute_member_default');
    $attribute_name = simple_ldap_user_variable_get('simple_ldap_user_attribute_name');

    // Log in as User 1.
    $this->drupalUser1Login();

    // Clean up the unnecessary LDAP entries that were added for testing.
    foreach ($this->ldapUser as $lu) {
      // Create a new SimpleLdapUser object, which performs a new search based
      // on the name attribute. This accounts for the possibility that the LDAP
      // entry has changed since it was created.
      $ldap_user = new SimpleLdapUser($lu->{$attribute_name}[0]);
      $ldap_user->delete();
      $this->assertFalse($ldap_user->exists, t(':dn was removed from LDAP', array(':dn' => $ldap_user->dn)));
    }

    // Create new user.
    $user = $this->drupalCreateUser();

    // Synchronization is forced by user edit page.
    $edit = array();
    $this->drupalPost('user/' . $user->uid . '/edit', $edit, t('Save'));

    // Load the LDAP user.
    $ldap_user = new SimpleLdapUser($user->name);
    $this->assertTrue($ldap_user->exists, t('New account, @user, was provisioned to LDAP.', array('@user' => $user->name)));

    // Clear menu cache, otherwise Simple LDAP Configuration pages are not present.
    menu_rebuild();

    // Submit the form to set for deletion.
    // The filter only matches one user.
    $edit = array(
      'simple_ldap_user_filter' => $attribute_member_default,
      'simple_ldap_active_group_delete_filtered' => 1,
    );
    $this->drupalPost('admin/config/people/simple_ldap/user', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Activated option: Delete LDAP entries, even if they do not match the filter'));

    // Submit the delete-user form.
    $edit = array(
      'user_cancel_method' => 'user_cancel_delete',
    );
    $this->drupalPost('user/' . $user->uid . '/cancel', $edit, t('Cancel account'));
    $this->assertText(t('@user has been deleted.', array('@user' => $user->name)), t('The @user was deleted from Backdrop.', array('@user' => $user->name)));

    // Verify that the user was deleted from LDAP.
    $ldap_user = new SimpleLdapUser($user->name);
    $this->assertFalse($ldap_user->exists, t('The @user was deleted from LDAP.', array('@user' => $user->name)));

    // Cleanup.
    $ldap_user->delete();
  }
}