<?php
/**
 * @file
 * Main simple_ldap_user module file.
 */

/**
 * Implements hook_menu().
 */
function simple_ldap_user_menu() {
  $items = array();

  $items['admin/config/people/simple_ldap/user'] = array(
    'title' => 'Users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_ldap_user_admin'),
    'access arguments' => array('administer site configuration'),
    'file' => 'simple_ldap_user.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Overrides the built-in user module's list of users, setting accounts to
 * "blocked" if there is no matching LDAP account.
 */
function simple_ldap_user_form_user_admin_account_alter(&$form, &$form_state, $form_id) {
  // Update the user array.
  foreach ($form['accounts']['#options'] as $uid => $user) {

    // Don't mess with user/1.
    if ($uid == 1) {
      continue;
    }

    // Verify active users. Blocked users may be provisioned to LDAP when they
    // are set to active, so they are left alone here.
    if ($user['status'] == 'active') {
      // Load the Drupal user object.
      $drupal_user = user_load($uid);

      // Check whether the user exists in LDAP.
      $ldap_user = SimpleLdapUser::singleton($drupal_user->name);
      if (!$ldap_user->exists()) {
        $form['accounts']['#options'][$uid]['status'] = 'blocked';
      }
    }
  }
}

/**
 * Implements hook_entity_info_alter().
 *
 * Specifies that SimpleLdapuserController should be used to load users instead
 * of the default controller.
 */
function simple_ldap_user_entity_info_alter(&$entity_info) {
  if (isset($entity_info['user'])) {
    // Use the SimpleLdapUserController class to manage users.
    $entity_info['user']['controller class'] = 'SimpleLdapUserController';
  }
}

/**
 * Implements hook_form_alter().
 *
 * @TODO It would be better to use hook_user_login() which works
 * even if the login is not coming from a form submission.
 */
function simple_ldap_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_block':
      // Remove the register and password reminder links.
      $server = SimpleLdapServer::singleton();
      if ($server->readonly) {
        unset($form['links']);
      }
    case 'user_login':
      $validate = array();
      foreach ($form['#validate'] as $callback) {
        if ($callback == 'user_login_final_validate') {
          $validate[] = 'simple_ldap_user_login_authenticate_validate';
        }
        $validate[] = $callback;
      }
      $form['#validate'] = $validate;
      break;

    default:
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Disables the user register and password reminder pages if the LDAP server is
 * read-only.
 */
function simple_ldap_user_menu_alter(&$items) {
  $server = SimpleLdapServer::singleton();
  if ($server->readonly) {
    unset($items['user/register']);
    unset($items['user/password']);
  }
}

/**
 * Implements hook_user_login().
 *
 * Fires when a user logs in.
 *
 * @param array $edit
 *   The form values submitted by the user to log in,
 *   including raw username and password.
 *
 * @todo simple_ldap_user_user_login()
 */
function simple_ldap_user_user_login(&$edit, $account) {
}

/**
 * Implements hook_user_logout().
 *
 * Fires when the user logs out.
 *
 * @todo simple_ldap_user_user_logout()
 */
function simple_ldap_user_user_logout($account) {
}

/**
 * Implements hook_user_presave().
 *
 * Fires before an account is created or changed.
 *
 * @param array $edit
 *   The form values submitted by the user.
 *
 * @todo simple_ldap_user_user_presave()
 */
function simple_ldap_user_user_presave(&$edit, $account, $category) {
}

/**
 * Implements hook_user_insert().
 *
 * Fires after a new account is created.
 *
 * @param array $edit
 *   The form values submitted by the user.
 *
 * @todo simple_ldap_user_user_insert()
 */
function simple_ldap_user_user_insert(&$edit, $account, $category) {
}

/**
 * Implements hook_user_update().
 *
 * Fires when a user account is edited.
 *
 * @param array $edit
 *   The form values submitted by the user.
 *
 * @todo simple_ldap_user_user_update()
 */
function simple_ldap_user_user_update(&$edit, $account, $category) {
}

/**
 * Implements hook_user_cancel().
 *
 * Fires on user account cancellations, before account is
 * cancelled. Operates on all cancellations except delete.
 *
 * @param array $edit
 *   The form values submitted by the user.
 * @param string $method
 *   The type of cancellation,
 *   see http://lb.cm/user_cancel_methods-7
 *
 * @todo simple_ldap_user_user_cancel()
 */
function simple_ldap_user_user_cancel($edit, $account, $method) {
}

/**
 * Implements hook_user_delete().
 *
 * Fires when a user account is deleted, before account is
 * deleted.
 *
 * @todo simple_ldap_user_user_delete()
 */
function simple_ldap_user_user_delete($account) {
}

/**
 * Implements hook_user_load().
 *
 * Fires when user information is being loaded from the database.
 * User information is cached, so this does not fire every time
 * a user object is handled.
 *
 * @todo simple_ldap_user_load()
 */
function simple_ldap_user_user_load($users) {
}

/**
 * Implements hook_user_view().
 *
 * Fires when user account information is being viewed.
 *
 * @todo simple_ldap_user_user_view()
 */
function simple_ldap_user_user_view($account, $view_mode, $langcode) {
}

/**
 * Validate a user login form against the LDAP directory.
 */
function simple_ldap_user_login_authenticate_validate($form, &$form_state) {
  // Check if the user has already been validated as user 1.
  if (isset($form_state['uid']) && $form_state['uid'] == 1) {
    return;
  }

  // Reset validation for all other users.
  unset($form_state['uid']);

  // Only attempt validation if both a username and password are present.
  $name = trim($form_state['values']['name']);
  $pass = trim($form_state['values']['pass']);
  if (!empty($name) && !empty($pass)) {
    // Authenticate the credentials against the LDAP directory.
    $ldap_user = SimpleLdapUser::singleton($name);
    if ($ldap_user->authenticate($pass)) {

      // Attempt to load the drupal user, if it exists.
      $drupal_user = user_load_by_name($name);

      // Create a new user object if one did not exist.
      if (empty($drupal_user)) {
        $attribute_name = variable_get('simple_ldap_user_attribute_name');
        $account = array(
          'name' => $ldap_user->{$attribute_name}[0],
          'status' => 1,
        );
        $drupal_user = user_save(NULL, $account);
      }

      // Set the form uid to indicate that the user is authenticated.
      $form_state['uid'] = $drupal_user->uid;
    }

  }
}

/**
 * Returns whether simple_ldap_user has been configured.
 */
function simple_ldap_user_configured() {
  $configured = TRUE;

  // Check each of the required configuration items.
  $configured = $configured && variable_get('simple_ldap_user_basedn') !== NULL;
  $configured = $configured && variable_get('simple_ldap_user_scope') !== NULL;
  $configured = $configured && variable_get('simple_ldap_user_objectclass') !== NULL;
  $configured = $configured && variable_get('simple_ldap_user_attribute_name') !== NULL;
  $configured = $configured && variable_get('simple_ldap_user_attribute_mail') !== NULL;

  return $configured;
}

/**
 * Returns the configured data sync direction.
 *
 * The sync direction is dependent on both the configurations of simple_ldap and
 * simple_ldap_user.
 */
function simple_ldap_user_sync() {
  // If the LDAP server is set to read-only, force ldap->drupal sync.
  $readonly = variable_get('simple_ldap_readonly', FALSE);
  if ($readonly) {
    return 'ldap';
  }

  // Get the sync config from simple_ldap_user, defaulting to ldap->drupal.
  $sync = variable_get('simple_ldap_user_sync', 'ldap');
  return $sync;
}

/**
 * Returns the attribute map, if configured.
 */
function simple_ldap_user_map() {
  $map = variable_get('simple_ldap_user_map', array());
  foreach ($map as $key => $value) {
    if (!isset($value['type'])) {
      $map[$key]['type'] = 'default';
    }
  }
  return $map;
}
