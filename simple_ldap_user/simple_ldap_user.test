<?php
/**
 * @file
 * Tests for Simple LDAP User module.
 */

abstract class SimpleLdapUserWebTestCase extends DrupalWebTestCase {

  protected $simple_ldap_user_filter;

  public function setUp() {
    parent::setUp(array('simple_ldap', 'simple_ldap_user', 'simple_ldap_test'));

    // Setting a filter messes with most of the tests. Clear it here, and save
    // the value for use in tests that need it.
    $this->simple_ldap_user_filter = variable_get('simple_ldap_user_filter');
    variable_del('simple_ldap_user_filter');
  }

  /**
   * Verify that a user is unable to log in.
   */
  public function drupalNoLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }

    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));

    // Verify that the user was unable to log in.
    $pass = $this->assertNoLink(t('Log out'), 0, t('User %name unable to log in.', array('%name' => $user->name)), t('User login'));

    if (!$pass) {
      $this->loggedInUser = $user;
    }
  }

  /**
   * Log in with User 1.
   */
  public function drupalUser1Login() {
    // Load password hashing API.
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

    // Generate a random password.
    $pass = hash('sha256', microtime());

    // Update user-1's password in the database.
    db_query("UPDATE {users} SET pass = :hash WHERE uid = 1", array(':hash' => user_hash_password($pass)));

    // Load user-1.
    $admin_user = user_load(1);

    // Set the password.
    $admin_user->pass_raw = $pass;

    // Log in.
    $this->drupalLogin($admin_user);
  }

}

class SimpleLdapUserAuthenticationWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Authentication',
      'description' => 'Tests that an LDAP user can authenticate to Drupal with the correct LDAP credentials.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test user authentication.
   */
  public function testGoodAuthentication() {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'];

    debug('A user exists in LDAP but not in Drupal.');

    // Verify that the test user exists in LDAP.
    $ldap_user = new SimpleLdapUser($test_user[$attribute_name]);
    $this->assertTrue($ldap_user->exists, t('The test user was found in LDAP.'));

    // Verify that the test user does not exist in Drupal.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertIdentical($drupal_user, FALSE, t('The test user does not exist in Drupal.'));

    // Verify that the user can log in.
    $this->drupalLogin($account);

    // Verify that the Drupal user was created during authentication.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertNotIdentical($drupal_user, FALSE, t('The test user was created in Drupal.'));

    debug('A user exists in both Drupal and LDAP.');

    // Verify again that the user can log in, now that the account exists in
    // both Drupal and LDAP.
    $this->drupalLogin($account);

    debug('A user exists in Drupal but not in LDAP.');

    // Create a new Drupal user that is not in LDAP.
    $account = $this->drupalCreateuser(array());

    // Verify that the user does not exist in LDAP by random chance.
    $ldap_user = new SimpleLdapUser($account->name);
    $this->assertFalse($ldap_user->exists, t('The user account does not exist in LDAP.'));

    // Verify that the user cannot log in.
    $this->drupalNoLogin($account);
  }

  public function testBadAuthentication() {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Initialize a user account object, with an invalid password.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'] . 'invalid';

    debug('A user exists in LDAP but not in Drupal.');

    // Verify that the test user exists in LDAP.
    $ldap_user = new SimpleLdapUser($test_user[$attribute_name]);
    $this->assertTrue($ldap_user->exists, t('The test user was found in LDAP.'));

    // Verify that the test user does not exist in Drupal.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertIdentical($drupal_user, FALSE, t('The test user does not exist in Drupal.'));

    // Verify that the user cannot log in.
    $this->drupalNoLogin($account);

    // Verify that the Drupal user was created during the authentication
    // attempt.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertNotIdentical($drupal_user, FALSE, t('The test user was created in Drupal.'));

    debug('A user exists in both Drupal and LDAP.');

    // Verify again that the user cannot log in, now that the account exists in
    // both Drupal and LDAP.
    $this->drupalNoLogin($account);

    debug('A user exists in Drupal but not in LDAP');

    // Create a new Drupal user that is not in LDAP.
    $account = $this->drupalCreateuser(array());
    $account->pass_raw = $account->pass_raw . 'invalid';

    // Verify that the user odes not exist in LDAP (by random chance).
    $ldap_user = new SimpleLdapUser($account->name);
    $this->assertFalse($ldap_user->exists, t('The user account does not exist in LDAP.'));

    // Verify that the user cannot log in.
    $this->drupalNoLogin($account);

    debug('A user does not exist in Drupal or LDAP.');

    // Initialize a random user object.
    $account = new stdClass();
    $account->name = $this->randomName();
    $account->pass_raw = $this->randomName();

    // Verify that the user does not exist in LDAP (by random chance).
    $ldap_user = new SimpleLdapUser($account->name);
    $this->assertFalse($ldap_user->exists, t('The user account does not exist in LDAP.'));

    // Verify that the user does not exist in Drupal (by random chance).
    $drupal_user = user_load_by_name($account->name);
    $this->assertIdentical($drupal_user, FALSE, t('The user does not exist in Drupal.'));

    // Attempt to log in.
    $this->drupalNoLogin($account);

    // Verify that the user was not created in LDAP.
    $ldap_user = new SimpleLdapUser($account->name);
    $this->assertFalse($ldap_user->exists, t('The user account does not exist in LDAP.'));

    // Verify that the user was not created in Drupal.
    $drupal_user = user_load_by_name($account->name);
    $this->assertIdentical($drupal_user, FALSE, t('The user does not exist in Drupal.'));
  }

}

class SimpleLdapUserFilterWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Search filter',
      'description' => 'Tests the LDAP search filter, if it is configured.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test the configured search filter.
   */
  public function testFilter() {
    // Load configuration variables.
    $inactive_user = variable_get('simple_ldap_test_inactive_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Only run the tests if there is a filter configured.
    if (empty($this->simple_ldap_user_filter)) {
      $this->assertTrue(TRUE, t('There is no search filter configured.'));
    }
    else {
      // Initialize a user account object.
      $account = new stdClass();
      $account->name = $inactive_user[$attribute_name];
      $account->pass_raw = $inactive_user['pass'];

      // Verify that the user exists before enabling the filter.
      $ldap_user = new SimpleLdapUser($account->name);
      $this->assertTrue($ldap_user->exists, t('The user exists in the LDAP directory.'));

      // Verify that the user can authenticate.
      $this->drupalLogin($account);

      // Enable the configured search filter (saved in parent::setUp()).
      variable_set('simple_ldap_user_filter', $this->simple_ldap_user_filter);

      // Verify that the user no longer exists, according to the filter.
      $ldap_user = new SimpleLdapUser($account->name);
      $this->assertFalse($ldap_user->exists, t('The user does not exist according to the search filter.'));

      // Attempt to log in anyway.
      $this->drupalNoLogin($account);
    }
  }

}

class SimpleLdapUserUserOneLoginWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User 1 login',
      'description' => 'Tests whether User 1 can log in, skipping LDAP authentication.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test User 1 authentication.
   */
  public function testUserOneLogin() {
    // Load user-1.
    $admin_user = user_load(1);

    // Verify that user-1 does not exist in LDAP.
    $ldap_user = new SimpleLdapUser($admin_user->name);
    $this->assertFalse($ldap_user->exists, t('User 1 does not exist in LDAP.'));

    // Attempt to log in.
    $this->drupalUser1Login();

    // Verify that user-1 still does not exist in LDAP.
    $ldap_user = new SimpleLdapUser($admin_user->name);
    $this->assertFalse($ldap_user->exists, t('User 1 does not exist in LDAP.'));
  }

}

class SimpleLdapUserUserChangesProfileWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User can modify profile',
      'description' => 'Tests whether a user can modify their profile, and that the changes are synchronized to LDAP.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * User edits profile information.
   *
   * #18 User can change their email address and LDAP is updated appropriately
   * #23 User changes last name and it is changed in LDAP
   * #30 User changes first name and it is changed in ldap
   *
   * @todo finish this.
   */
  public function testUserChangesProfile() {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'];

    // Log in user. This should create/sync an LDAP user (tested elsewhere)
    $this->drupalLogin($account);
    $drupal_user = user_load_by_name($test_user[$attribute_name]);

    $edit['current_pass'] = $test_user['pass'];
//    $edit['mail'] = $drupal_user->mail . 'modified';
    $edit['field_last_name[und][0][value]'] = $this->randomName();

    $map = simple_ldap_user_map();
    foreach ($map as $field) {
      switch($field['type']) {
        case 'field':
          $edit[$field['drupal'] . '[und][0][value]'] = $this->randomName();
          break;
        case 'default':
        default:
          $edit[$field['drupal']] = $this->randomName();
      }
    }

    // Submit user edit form.
    $this->drupalPost('user/' . $drupal_user->uid . '/edit', $edit, 'Save');

  }
}

class SimpleLdapUserRegistrationTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User registration',
      'description' => 'Test registration of user under different configurations.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Generate random data for user registration form.
   */
  public function formData(&$name, &$mail) {
    $edit['name'] = $name = $this->randomName();
    $edit['mail'] = $mail = $edit['name'] . '@example.com';

    $map = simple_ldap_user_map();
    foreach ($map as $attribute) {
      if ($attribute['required']) {
        $edit[$attribute['drupal'] . '[und][0][value]'] = $this->randomName();
      }
    }

    return $edit;
  }

  public function testRegistrationWithEmailVerification() {
    // Require e-mail verification.
    variable_set('user_email_verification', TRUE);

    // Set registration to administrator only.
    variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
    $this->drupalGet('user/register');
    $this->assertResponse(403, t('Registration page is inaccessible when only administrators can create accounts.'));

    // Allow registration by site visitors without administrator approvial.
    variable_set('user_register', USER_REGISTER_VISITORS);
    $edit = $this->formData($name, $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message with further instructions has been sent to your e-mail address.'), t('User registered successfully.'));
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);
    $this->assertTrue($new_user->status, t('New account is active after registration.'));
    $ldap_user = new SimpleLdapUser($name);
    $this->assertTrue($ldap_user->exists, t('New account was provisioned to LDAP.'));

    // Allow registration by site visitors, but require administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
    $edit = $this->formData($name, $mail);
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);
    $this->assertFalse($new_user->status, t('New account is blocked until approved by an administrator.'));
  }

  public function testRegistrationWithoutEmailVerification() {
    // Don't require e-mail verification.
    variable_set('user_email_verification', FALSE);

    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);
    $edit = $this->formData($name, $mail);

    // Try entering a mismatching password.
    $edit['pass[pass1]'] = '99999.0';
    $edit['pass[pass2]'] = '99999';
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('The specified passwords do not match.'), t('Typing mismatched passwords displays an error message.'));

    // Enter a correct password.
    $edit['pass[pass1]'] = $new_pass = $this->randomName();
    $edit['pass[pass2]'] = $new_pass;
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);
    $this->assertText(t('Registration successful. You are now logged in.'), t('Users are logged in after registering.'));
    $this->drupalLogout();

    // Allow registration by site visitors, but require administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
    $edit = $this->formData($name, $mail);
    $edit['pass[pass1]'] = $pass = $this->randomName();
    $edit['pass[pass2]'] = $pass;
    $this->drupalPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.'), t('Users are notified of pending approval'));
    $ldap_user = new SimpleLdapUser($name);
    $this->assertTrue($ldap_user->exists, t('New account has been provisioned to LDAP.'));

    // Try to login before administrator approval.
    $auth = array(
      'name' => $name,
      'pass' => $pass,
    );
    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertText(t('The username @name has not been activated or is blocked.', array('@name' => $name)), t('User cannot login yet.'));

    // Activate the new account.
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);
    $this->drupalUser1Login();
    $edit = array(
      'status' => 1,
    );
    $this->drupalPost('user/' . $new_user->uid . '/edit', $edit, t('Save'));
    $this->drupalLogout();

    // Login after administrator approval.
    $this->drupalPost('user/login', $auth, t('Log in'));
    $this->assertText(t('Member for'), t('The user can log in after administrator approval.'));
  }

  public function testRegistrationValues() {
    // Get simple_ldap_user config.
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Allow registration by site visitors without administrator approval.
    variable_set('user_register', USER_REGISTER_VISITORS);

    // Don't require e-mail verification.
    variable_set('user_email_verification', FALSE);

    // Set the default timezone to Brussels.
    variable_set('configurable_timezones', 1);
    variable_set('date_default_timezone', 'Europe/Brussels');

    // Verify that the required mapped fields show up on the registration form.
    $this->drupalGet('user/register');
    $map = simple_ldap_user_map();
    foreach ($map as $field) {
      if ($field['required'] && $field['type'] == 'field') {
        $this->assertText($field['drupal'], t(':field appears on the user registration form', array(':field' => $field['drupal'])));
      }
    }

    // Submit registration form.
    $edit = $this->formData($name, $mail);
    $edit['pass[pass1]'] = $new_pass = $this->randomName();
    $edit['pass[pass2]'] = $new_pass;
    $this->drupalPost(NULL, $edit, t('Create new account'));

    // Load the Drupal user.
    $accounts = user_load_multiple(array(), array('name' => $name, 'mail' => $mail));
    $new_user = reset($accounts);

    // Load the LDAP user.
    $ldap_user = new SimpleLdapUser($name);

    // Check user fields.
    $this->assertEqual($new_user->name, $name, t('Drupal username matches.'));
    $this->assertEqual($ldap_user->{$attribute_name}[0], $name, t('LDAP username matches.'));

    $this->assertEqual($new_user->mail, $mail, t('Drupal e-mail address matches.'));
    $this->assertEqual($ldap_user->{$attribute_mail}[0], $mail, t('LDAP e-mail address matches.'));

    foreach ($map as $field) {
      if ($field['required'] && $field['type'] == 'field') {
        $this->assertEqual($new_user->{$field['drupal']}[LANGUAGE_NONE][0]['value'], $edit[$field['drupal'] . '[und][0][value]'], t('The :field Drupal field value was correctly saved.', array(':field' => $field['drupal'])));
        $this->assertEqual($ldap_user->{$field['ldap']}[0], $edit[$field['drupal'] . '[und][0][value]'], t('The :field LDAP attribute was correctly saved.', array(':field' => $field['ldap'])));
      }
    }
  }

}

class SimpleLdapUserSyncTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User data synchronization',
      'description' => 'Test data synchronization between LDAP and Drupal.',
      'group' => 'Simple LDAP User',
    );
  }

  public function verifySync($suffix = '') {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Load the LDAP user.
    $ldap_user = new SimpleLdapUser($test_user[$attribute_name]);

    // Load the Drupal user.
    $drupal_user = user_load_multiple(array(), array('name' => $test_user[$attribute_name]), TRUE);
    $drupal_user = reset($drupal_user);

    // Check the mail attribute explicitly.
    $this->assertEqual($ldap_user->{$attribute_mail}[0], $drupal_user->mail, t('The @attr LDAP attribute and the Drupal mail field are synchronized.', array('@attr' => $attribute_mail)));
    // Make sure they match the control.
    $this->assertEqual($test_user[$attribute_mail] . $suffix, $drupal_user->mail, t(':value matches the control value', array(':value' => $drupal_user->mail)));

    // Check the other mapped fields.
    $attribute_map = simple_ldap_user_map();
    foreach ($attribute_map as $attribute) {
      switch ($attribute['type']) {
        case 'field':
          $items = field_get_items('user', $drupal_user, $attribute['drupal']);
          $drupal = $items[0]['value'];
          break;

        case 'default':
        default:
          $drupal = $drupal_user->{$attribute['drupal']};
      }
    }
    // Make sure drupal and ldap match.
    $this->assertEqual($ldap_user->{$attribute['ldap']}[0], $drupal, t('The @ldap LDAP attribute and the @drupal Drupal field are synchronized.', array('@ldap' => $attribute['ldap'], '@drupal' => $attribute['drupal'])));
    // Make sure they match the control.
    $this->assertEqual($test_user[$attribute['ldap']] . $suffix, $drupal, t(':value matches the control value', array(':value' => $drupal)));
  }

  public function modifyLdap($suffix = '') {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Load the LDAP Server.
    $server = SimpleLdapServer::singleton();

    // Mail is special, change it explicitly.
    $result = $server->modify($test_user['dn'], array($attribute_mail => $test_user[$attribute_mail] . $suffix), 'replace');
    $this->assertNotIdentical($result, FALSE, t('Modified @attr attribute in LDAP.', array('@attr' => $attribute_mail)));

    // Modify the other mapped attributes.
    $attribute_map = simple_ldap_user_map();
    foreach ($attribute_map as $attribute) {
      $result = $server->modify($test_user['dn'], array($attribute['ldap'] => $test_user[$attribute['ldap']] . $suffix), 'replace');
      $this->assertNotIdentical($result, FALSE, t('Modified @attr attribute in LDAP.', array('@attr' => $attribute['ldap'])));
    }
  }

  public function modifyDrupal($suffix = '') {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Load the drupal user.
    $drupal_user = user_load_multiple(array(), array('name' => $test_user[$attribute_name]), TRUE);
    $drupal_user = reset($drupal_user);

    // Initialize the $edit array.
    $edit = array();

    // Update mail expicitly.
    $edit['mail'] = $test_user[$attribute_mail];

    // Update the other mapped attributes.
    $attribute_map = simple_ldap_user_map();
    foreach ($attribute_map as $attribute) {
      switch ($attribute['type']) {
        case 'field':
          $items = field_get_items('user', $drupal_user, $attribute['drupal']);
          $language = field_language('user', $drupal_user, $attribute['drupal']);
          $edit[$attribute['drupal']][$language][0]['value'] = $test_user[$attribute['ldap']];
          break;

        case 'default':
        default:
          $edit[$attribute['drupal']] = $test_user[$attribute['ldap']];
      }
    }

    // Save the user.
    user_save($drupal_user, $edit);
  }

  public function testSyncOnHookUserLogin() {
    // Set the sync trigger to hook_user_login
    variable_set('simple_ldap_user_sync', 'hook_user_login');

    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'];

    // Log in with the test user, this should do the initial account sync
    // (tested elsewhere).
    $this->drupalLogin($account);

    // Generate a random value to append.
    $suffix = $this->randomName();

    // LDAP is the authoritative source. Change all of the mapped fields there.
    variable_set('simple_ldap_user_source', 'ldap');
    $this->modifyLdap($suffix);

    // Log in, and verify synchronization.
    $this->drupalLogin($account);
    $this->verifySync($suffix);

    // Drupal is the authoritative source, Change all of the mapped fields
    // there.
    variable_set('simple_ldap_user_source', 'drupal');
    $this->modifyDrupal();

    // Change LDAP again, because modifyDrupal needs to call user_save() which
    // in turn calls hook_user_update() which also syncs.
    $this->modifyLdap($suffix);

    // Log in, and verify synchronization.
    $this->drupalLogin($account);
    $this->verifySync();
  }

  public function testSyncOnHookUserLoad() {
    // Set the sync trigger to hook_user_load
    variable_set('simple_ldap_user_sync', 'hook_user_load');

    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $attribute_mail = variable_get('simple_ldap_user_attribute_mail');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'];

    // Log in with the test user, this should do the initial account sync
    // (tested elsewhere).
    $this->drupalLogin($account);

    // Generate a random value to append.
    $suffix = $this->randomName();

    // LDAP is the authoritative source. Change all of the mapped fields there.
    variable_set('simple_ldap_user_source', 'ldap');
    $this->modifyLdap($suffix);

    // Load the user, and verify synchronization.
    $drupal_user = user_load_multiple(array(), array('name' => $test_user[$attribute_name]), TRUE);
    $this->verifySync($suffix);

    // Drupal is the authoritative source, Change all of the mapped fields
    // there.
    variable_set('simple_ldap_user_source', 'drupal');
    $this->modifyDrupal();

    // Change LDAP again, because modifyDrupal needs to call user_save() which
    // in turn calls hook_user_update() which also syncs.
    $this->modifyLdap($suffix);

    // Load the user, and verify synchronization.
    $drupal_user = user_load_multiple(array(), array('name' => $test_user[$attribute_name]), TRUE);
    $this->verifySync();
  }

}
