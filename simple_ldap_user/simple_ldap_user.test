<?php
/**
 * @file
 * Tests for Simple LDAP User module.
 */

abstract class SimpleLdapUserWebTestCase extends DrupalWebTestCase {

  public function setUp() {
    parent::setUp(array('simple_ldap', 'simple_ldap_user', 'simple_ldap_test'));
    simple_ldap_test_config();
    $this->assertTrue(simple_ldap_configured(), t('The :module module is configured.', array(':module' => 'Simple LDAP')));

    // Add fields to the user entity.
    $map = simple_ldap_user_map();
    foreach ($map as $attribute) {
      if ($attribute['type'] == 'field') {
        $field = field_create_field(array(
          'field_name' => $attribute['drupal'],
          'type' => 'text',
          'cardinality' => 1,
        ));
        $instance = field_create_instance(array(
          'field_name' => $attribute['drupal'],
          'entity_type' => 'user',
          'label' => $attribute['drupal'],
          'bundle' => 'user',
          'required' => $attribute['required'],
          'settings' => array(
            'user_register_form' => $attribute['required'],
          ),
        ));
      }
    }
  }

  /**
   * Verify that a user is unable to log in.
   */
  public function drupalNoLogin(stdClass $user) {
    if ($this->loggedInUser) {
      $this->drupalLogout();
    }

    $edit = array(
      'name' => $user->name,
      'pass' => $user->pass_raw,
    );
    $this->drupalPost('user', $edit, t('Log in'));

    // Verify that the user was unable to log in.
    $pass = $this->assertNoLink(t('Log out'), 0, t('User %name unable to log in.', array('%name' => $user->name)), t('User login'));

    if (!$pass) {
      $this->loggedInUser = $user;
    }
  }

  /**
   * Override DrupalWebTestCase::drupalCreateUser().
   *
   * Need to make sure that required fields are set.
   */
  public function drupalCreateUser(array $permissions = array(), $status = 1) {
    // Create a role with the given permission set, if any.
    $rid = FALSE;
    if ($permissions) {
      $rid = $this->drupalCreateRole($permissions);
      if (!$rid) {
        return FALSE;
      }
    }

    // Create a user assigned to that role.
    $edit = array();
    $edit['name']   = $this->randomName();
    $edit['mail']   = $edit['name'] . '@example.com';
    $edit['pass']   = user_password();
    $edit['status'] = $status;
    if ($rid) {
      $edit['roles'] = array($rid => $rid);
    }

    // Add require fields.
    $map = simple_ldap_user_map();
    foreach ($map as $attribute) {
      if ($attribute['required']) {
        $edit[$attribute['drupal']]['und'][0]['value'] = $this->randomName();
      }
    }

    $account = user_save(drupal_anonymous_user(), $edit);

    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array('%name' => $edit['name'], '%pass' => $edit['pass'])), t('User login'));
    if (empty($account->uid)) {
      return FALSE;
    }

    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }

  /**
   * Log in with User 1.
   */
  public function drupalUser1Login() {
    // Load password hashing API.
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');

    // Generate a random password.
    $pass = hash('sha256', microtime());

    // Update user-1's password in the database.
    db_query("UPDATE {users} SET pass = :hash WHERE uid = 1", array(':hash' => user_hash_password($pass)));

    // Load user-1.
    $admin_user = user_load(1);

    // Set the password.
    $admin_user->pass_raw = $pass;

    // Log in.
    $this->drupalLogin($admin_user);
  }

}

class SimpleLdapUserAuthenticationWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Authentication',
      'description' => 'Tests that an LDAP user can authenticate to Drupal with the correct LDAP credentials.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test user authentication.
   *
   * #15 - Test that user can authenticate to Drupal using LDAP credentials.
   * #16 - User cannot authenticate to Drupal using incorrect credentials.
   */
  public function testAuthentication() {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];

    debug('A user exists in LDAP but not in Drupal.');

    // Verify that the test user exists in LDAP.
    $ldap_user = new SimpleLdapUser($test_user[$attribute_name]);
    $this->assertTrue($ldap_user->exists, t('The test user was found in LDAP.'));

    // Verify that the test user does not exist in Drupal.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertIdentical($drupal_user, FALSE, t('The test user does not exist in Drupal.'));

    // Verify that the user cannot log in with incorrect credentials.
    $account->pass_raw = $test_user['pass'] . 'invalid';
    $this->drupalNoLogin($account);

    // Verify that the user still does not exist in Drupal.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertIdentical($drupal_user, FALSE, t('The test user still does not exist in Drupal.'));

    // Verify that the user can log in.
    $account->pass_raw = $test_user['pass'];
    $this->drupalLogin($account);

    // Verify that the Drupal user was created during authentication.
    $drupal_user = user_load_by_name($test_user[$attribute_name]);
    $this->assertNotIdentical($drupal_user, FALSE, t('The test user was created in Drupal.'));

    debug('A user exists in both Drupal and LDAP.');

    // Verify again that the user can log in, now that the account exists in
    // both Drupal and LDAP.
    $this->drupalLogin($account);

    // Verify that the user cannot log in with incorrect credentials.
    $account->pass_raw = $test_user['pass'] . 'invalid';
    $this->drupalNoLogin($account);

    debug('A user exists in Drupal but not in LDAP.');

    // Create a new Drupal user that is not in LDAP.
    $account = $this->drupalCreateuser(array());

    // Verify that the user does not exist in LDAP by random chance.
    $ldap_user = new SimpleLdapUser($account->name);
    $this->assertFalse($ldap_user->exists, t('The user account does not exist in LDAP.'));

    // Verify that the user cannot log in.
    $this->drupalNoLogin($account);
  }

}

class SimpleLdapUserFilterWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Search filter',
      'description' => 'Tests the LDAP search filter, if it is configured.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test the configured search filter.
   *
   * #26 - Verify that user not in active group cannot authenticate.
   */
  public function testFilter() {
    // Load configuration variables.
    $inactive_user = variable_get('simple_ldap_test_inactive_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');
    $filter = variable_get('simple_ldap_user_filter');

    // Only run the tests if there is a filter configured.
    if (empty($filter)) {
      $this->assertTrue(TRUE, t('There is no search filter configured.'));
    }
    else {
      // Initialize a user account object.
      $account = new stdClass();
      $account->name = $inactive_user[$attribute_name];
      $account->pass_raw = $inactive_user['pass'];

      // Verify that the user does not exist per the configured search filter.
      $ldap_user = new SimpleLdapUser($account->name);
      $this->assertFalse($ldap_user->exists, t('The user does not exist according to the LDAP search filter.'));

      // Verify that the test user does not exist in Drupal.
      $drupal_user = user_load_by_name($inactive_user[$attribute_name]);
      $this->assertIdentical($drupal_user, FALSE, t('The test user does not exist in Drupal.'));

      // Attempt to log in anyway.
      $this->drupalNoLogin($account);

      // Clear the search filter.
      variable_set('simple_ldap_user_filter', '');

      // Verify that the user now exists.
      $ldap_user = new SimpleLdapUser($account->name);
      $this->assertTrue($ldap_user->exists, t('The user exists in the LDAP directory.'));

      // Attempt to log in again.
      $this->drupalLogin($account);

      // Verify that the user now exists in Drupal.
      $drupal_user = user_load_by_name($inactive_user[$attribute_name]);
      $this->assertNotIdentical($drupal_user, FALSE, t('The test user was created in Drupal.'));

      // Now that the user exists in Drupal, reset the filter, and check again.
      variable_set('simple_ldap_user_filter', $filter);

      // Verify that the user does not exist per the configured search filter.
      $ldap_user = new SimpleLdapUser($account->name);
      $this->assertFalse($ldap_user->exists, t('The user does not exist according to the LDAP search filter.'));

      // Attempt to log in anyway.
      $this->drupalNoLogin($account);
    }
  }

}

class SimpleLdapUserUserOneLoginWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User 1 login',
      'description' => 'Tests whether User 1 can log in, skipping LDAP authentication.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Test User 1 authentication.
   *
   * #20 - Log into Drupal as User 1 avoids LDAP.
   */
  public function testUserOneLogin() {
    // Load user-1.
    $admin_user = user_load(1);

    // Verify that user-1 does not exist in LDAP.
    $ldap_user = new SimpleLdapUser($admin_user->name);
    $this->assertFalse($ldap_user->exists, t('User 1 does not exist in LDAP.'));

    // Attempt to log in.
    $this->drupalUser1Login();

    // Verify that user-1 does not exist in LDAP.
    $ldap_user = new SimpleLdapUser($admin_user->name);
    $this->assertFalse($ldap_user->exists, t('User 1 does not exist in LDAP.'));
  }

}

class SimpleLdapUserUserChangesProfileWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'User can modify profile',
      'description' => 'Tests whether a user can modify their profile, and that the changes are synchronized to LDAP.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * User edits profile information.
   *
   * #18 User can change their email address and LDAP is updated appropriately
   * #23 User changes last name and it is changed in LDAP
   * #30 User changes first name and it is changed in ldap
   *
   * @todo finish this.
   */
  public function testUserChangesProfile() {
    // Load configuration variables.
    $test_user = variable_get('simple_ldap_test_user');
    $attribute_name = variable_get('simple_ldap_user_attribute_name');

    // Initialize a user account object.
    $account = new stdClass();
    $account->name = $test_user[$attribute_name];
    $account->pass_raw = $test_user['pass'];

    // Log in user. This should create/sync an LDAP user (tested elsewhere)
    $this->drupalLogin($account);
    $drupal_user = user_load_by_name($test_user[$attribute_name]);

    $edit['current_pass'] = $test_user['pass'];
    $edit['mail'] = $drupal_user->mail . 'modified';
    $edit['field_last_name[und][0][value]'] = 'MyLastname';

    // Submit user edit form.
    $this->drupalPost('user/' . $drupal_user->uid . '/edit', $edit, 'Save');

  }
}

class SimpleLdapUserRegisterWebTestCase extends SimpleLdapUserWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Create new account',
      'description' => 'User can create a new account using the register form.',
      'group' => 'Simple LDAP User',
    );
  }

  /**
   * Register for a new user account.
   *
   * #19 Register for Drupal and create new LDAP user.
   * #27 Ensure email verification creates the user in LDAP
   * #28 Ensure user is not created without email verification
   *
   * @todo finish this.
   */
  public function testUserRegister() {
    // Generate random data.
    $edit['name'] = $this->randomName();
    $edit['mail'] = $edit['name'] . '@example.com';

    $map = simple_ldap_user_map();
    foreach ($map as $attribute) {
      if ($attribute['required']) {
        $edit[$attribute['drupal'] . '[und][0][value]'] = $this->randomName();
      }
    }

    // Submit registration form.
    $this->drupalPost('user/register', $edit, 'Create new account');

    // Verify that the Drupal user was created, and that the status == 0.
    $drupal_user = user_load_by_name($edit['name']);
    $this->assertNotIdentical($drupal_user, FALSE, t('The user was successfully registered.'));
    $this->assertFalse($drupal_user->status, t('The user status is "blocked".'));

    // Verify that the user does not yet exist in LDAP.
    $ldap_user = new SimpleLdapUser($edit['name']);
    $this->assertFalse($ldap_user->exists, t('The user does not yet exist in LDAP.'));

    // Get the email that was sent.
    $email = $this->drupalGetMails();
    debug($email[0]['body']);

  }
}
