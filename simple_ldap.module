<?php
/**
 * @file
 * Main simple_ldap module file.
 */

/**
 * Implements hook_menu().
 */
function simple_ldap_menu() {
  $items = array();

  $items['admin/config/people/simple_ldap'] = array(
    'title' => 'Simple LDAP Configuration',
    'description' => 'LDAP server, authentication parameters, roles, provisioning, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simple_ldap_admin'),
    'access arguments' => array('administer site configurations'),
    'file' => 'simple_ldap.admin.inc',
  );

  $items['admin/config/people/simple_ldap/server'] = array(
    'title' => 'Server',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  return $items;
}

/**
 * Returns whether simple_ldap has been configured.
 */
function simple_ldap_configured() {
  $configured = TRUE;

  // Check each of the required configuration items.
  $configured = $configured && variable_get('simple_ldap_host') !== NULL;
  $configured = $configured && variable_get('simple_ldap_port') !== NULL;

  return $configured;
}

/**
 * Implements hook_user_login().
 *
 * Fires when a user logs in.
 *
 * @param array $edit 
 *   The form values submitted by the user to log in,
 *   including raw username and password.
 */
function simple_ldap_user_login(&$edit, $account) {

}

/**
 * Implements hook_user_logout().
 *
 * Fires when the user logs out.
 */
function simple_ldap_user_logout($account) {

}

/**
 * Implements hook_user_presave().
 *
 * Fires before an account is created or changed.
 *
 * @param array $edit 
 *   The form values submitted by the user.
 */
function simple_ldap_user_presave(&$edit, $account, $category) {

}

/**
 * Implements hook_user_insert().
 *
 * Fires after a new account is created.
 *
 * @param array $edit 
 *   The form values submitted by the user.
 */
function simple_ldap_user_insert(&$edit, $account, $category) {

}

/**
 * Implements hook_user_update().
 *
 * Fires when a user account is edited.
 *
 * @param array $edit 
 *   The form values submitted by the user.
 */
function simple_ldap_user_update(&$edit, $account, $category) {

}

/**
 * Implements hook_user_cancel().
 *
 * Fires on user account cancellations, before account is
 * cancelled. Operates on all cancellations except delete.
 *
 * @param array $edit 
 *   The form values submitted by the user.
 * @param $method
 *   The type of cancellation,
 *   see http://api.drupal.org/api/drupal/modules!user!user.pages.inc/function/user_cancel_methods/7
 */
function simple_ldap_user_cancel($edit, $account, $method) {

}

/**
 * Implements hook_user_delete().
 *
 * Fires when a user account is deleted, before account is
 * deleted.
 */
function simple_ldap_user_delete($account) {

}

/**
 * Implements hook_user_load().
 *
 * Fires when user information is being loaded from the database.
 * User information is cached, so this does not fire every time
 * a user object is handled.
 */
function simple_ldap_user_load($users) {

}

/**
 * Implements hook_user_view().
 *
 * Fires when user account information is being viewed.
 */
function simple_ldap_user_view($account, $view_mode, $langcode) {

}

/**
 * Implements hook_user_role_presave().
 *
 * Fires before a role is added or edited.
 */
function simple_ldap_user_role_presave($role) {

}

/**
 * Implements hook_user_role_insert().
 *
 * Fires when a role is inserted.
 */
function simple_ldap_user_role_insert($role) {

}

/**
 * Implements hook_user_role_update().
 *
 * Fires when a role is updated.
 */
function simple_ldap_user_role_update($role) {

}

/**
 * Implements hook_user_role_delete().
 *
 * Fires when a role is deleted.
 */
function simple_ldap_user_role_delete($role) {

}
